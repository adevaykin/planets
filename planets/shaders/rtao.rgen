#version 460 core
#extension GL_EXT_ray_tracing : enable

#include "camera.glsl"

layout(location = 0) rayPayloadEXT vec4 payload[2];
//layout(location = 1) rayPayloadEXT vec4 debugPayload;

layout(binding = 0, set = 0) uniform accelerationStructureEXT acc;
layout(binding = 1, rgba32f) uniform image2D img;
layout(binding = 3, rgba16f) uniform image2D debugImg;

layout(binding = 2, set = 0) uniform RayParams
{
    vec4 rayOrigin;
    vec4 rayDir;
    uint sbtOffset;
    uint sbtStride;
    uint missIndex;
    uint padding;
} params;

void sampleCameraRay(out vec3 origin, out vec3 direction, mat4 inverseView, mat4 inverseProj/*, inout uint rngState*/) {
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);// + vec2(rand(rngState), rand(rngState));
    const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    origin = (inverseView * vec4(0,0,0,1)).xyz;
    vec4 target = inverseProj * vec4(d.x, d.y, 1, 1);
    direction = (inverseView * vec4(normalize(target.xyz), 0)).xyz;
}

void main()
{
    vec3 rayOrigin;
    vec3 rayDir;
    sampleCameraRay(rayOrigin, rayDir, cameraUbo.viewInverse, cameraUbo.projInverse/*, rngState*/);

    uint sbtOffset = 0;
    uint sbtStride = 0;
    uint missIndex = 0;

    payload[0] = vec4(0.0, 0.0, 0.0, 1.0);
    payload[1] = vec4(1.0);
    //debugPayload = vec4(1.0, 0.0, 0.0, 0.0);
    traceRayEXT(acc, gl_RayFlagsOpaqueEXT, 0xff, sbtOffset, sbtStride, missIndex, rayOrigin, 0.0, rayDir, 1000.0f, 0);

    imageStore(img, ivec2(gl_LaunchIDEXT.x, gl_LaunchSizeEXT.y-gl_LaunchIDEXT.y), payload[0]);
    imageStore(debugImg, ivec2(gl_LaunchIDEXT.x, gl_LaunchSizeEXT.y-gl_LaunchIDEXT.y), payload[1]);
}
