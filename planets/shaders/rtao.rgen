#version 460 core
#extension GL_EXT_ray_tracing : enable

#include "camera.glsl"

layout(location = 0) rayPayloadEXT vec4 payload;

layout(binding = 0, set = 0) uniform accelerationStructureEXT acc;
layout(binding = 1, rgba32f) uniform image2D img;

layout(binding = 2, set = 0) uniform RayParams
{
    vec4 rayOrigin;
    vec4 rayDir;
    uint sbtOffset;
    uint sbtStride;
    uint missIndex;
    uint padding;
} params;

vec3 getCameraRayLookAt(float fieldOfViewY, float aspectRatio, vec3 eye, vec3 ref, vec3 up, vec2 point)
{
    float focalLength = 1.0 / tan(0.5 * fieldOfViewY * 3.14159265359 / 180.0);
    vec2 pos = 2.0 * (point - 0.5);
    vec3 rayCam = vec3(pos.x * aspectRatio, pos.y, -focalLength);

    vec3 camZ = normalize(eye - ref);
    vec3 v = normalize(up);
    vec3 camX = cross(v, camZ);
    vec3 camY = cross(camZ, camX);

    vec3 rayWorld = camX * rayCam.x + camY * rayCam.y + camZ * rayCam.z;
    return normalize(rayWorld);
}

void main()
{
    vec3 rayOrigin = params.rayOrigin.xyz;
    vec2 texCoord = (vec2(gl_LaunchIDEXT.xy) + 0.5) / vec2(gl_LaunchSizeEXT.xy);
    float aspect = float(gl_LaunchSizeEXT.x) / float(gl_LaunchSizeEXT.y);
    vec3 rayDir = getCameraRayLookAt(90.0, aspect, rayOrigin, params.rayDir.xyz, vec3(0.0, 1.0, 0.0), texCoord);
    uint sbtOffset = 0;
    uint sbtStride = 1;
    uint missIndex = 0;

    traceRayEXT(acc, gl_RayFlagsOpaqueEXT, 0xff, sbtOffset, sbtStride, missIndex, rayOrigin, 0.0, rayDir, 100.0f, 0);

    imageStore(img, ivec2(gl_LaunchIDEXT), payload);
}
